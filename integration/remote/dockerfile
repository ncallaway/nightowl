FROM node:18.12-alpine

# set our node environment, either development or production
# defaults to production, compose overrides this to development on build and run
ARG NODE_ENV=production
ENV NODE_ENV $NODE_ENV

# you'll likely want the latest npm, regardless of node version, for speed and fixes
# but pin this version for the best stability
RUN npm i npm@9.2.0 -g

# Create workdir directory
RUN mkdir -p /app
WORKDIR /app

# Copying source files
COPY --chown=node:node ./package.json ./package-lock.json /app/

# Installing dependencies
RUN npm install --also=dev && npm cache clean --force

# Copy other source files
COPY --chown=node:node ./tsconfig.json /app/
COPY --chown=node:node ./src /app/src/
RUN chown -R node:node /app
USER node

# Compile the application
RUN npx tsc

FROM node:18.12-alpine

# set our node environment, either development or production
# defaults to production, compose overrides this to development on build and run
ARG NODE_ENV=production
ENV NODE_ENV $NODE_ENV

# you'll likely want the latest npm, regardless of node version, for speed and fixes
# but pin this version for the best stability
RUN npm i npm@9.2.0 -g

# allow node to run on :80
# RUN setcap cap_net_bind_service=+ep /usr/local/bin/node

# Create workdir directory
RUN mkdir -p /app
WORKDIR /app

# Copying source files
COPY --chown=node:node ./package.json ./package-lock.json /app/

# Installing dependencies
RUN npm install && npm cache clean --force

# Copy the build application
COPY --from=0 --chown=node:node /app/dist /app/dist/
COPY --from=0 --chown=node:node /app/help /app/help/

# Running the app
CMD "node" "dist/app.js"